version: 2

aliases:
  - &test-base-no-backports
    working_directory: /tmp/drafter
    environment:
    steps:
      - run:
          name: Install sudo
          command: 'apt-get update && apt-get install -y sudo'
      - run:
          name: Install CMake
          command: 'apt-get update && sudo apt-get install -y cmake'
      - checkout
      - run:
          name: Update submodules
          command: 'git submodule update --init --recursive'
      - run:
          name: Build & Test
          command: |
            mkdir build
            cd build
            cmake ..
            make -j4 all
            CTEST_OUTPUT_ON_FAILURE=1 ctest -j4

  - &test-xcode
    working_directory: /tmp/drafter
    environment:
    steps:
      - run:
          name: Install CMake
          command: 'brew install cmake'
      - checkout
      - run:
          name: Update submodules
          command: 'git submodule update --init --recursive'
      - run:
          name: Build & Test
          command: |
            mkdir build
            cd build
            cmake .. -G Xcode
            CTEST_OUTPUT_ON_FAILURE=1 ctest -j4 -D ExperimentalBuild
            CTEST_OUTPUT_ON_FAILURE=1 ctest -j4 -D ExperimentalTest

  - &test-clang-base-no-backports
    <<: *test-base-no-backports

  - &test-base-backports
    working_directory: /tmp/drafter
    environment:
    steps:
      - run:
          name: Install sudo
          command: 'apt-get update && apt-get install -y sudo'
      - run:
          name: Install CMake jessie-backports
          command: 'echo "deb http://ftp.debian.org/debian jessie-backports main" | sudo tee --append /etc/apt/sources.list && sudo apt-get update && sudo apt-get -t jessie-backports install -y --no-install-recommends cmake'
      - checkout
      - run:
          name: Update submodules
          command: 'git submodule update --init --recursive'
      - run:
          name: Build & Test
          command: |
            mkdir build
            cd build
            cmake ..
            make -j4 all
            CTEST_OUTPUT_ON_FAILURE=1 ctest -j4


  - &test-clang-base-backports
    <<: *test-base-backports

  - &tag-filter
    filters:
      tags:
        only: /^v.*/

workflows:
  version: 2

  drafter:
    jobs:
      - lint
      - test-gcc5.4: *tag-filter
      - test-gcc6: *tag-filter
      - test-gcc7: *tag-filter
      #- test-gcc8: *tag-filter
      - test-clang4: *tag-filter
      - test-clang5: *tag-filter
      - test-clang6: *tag-filter
      - test-xcode9: *tag-filter
      - test-integration: *tag-filter
      - test-valgrind: *tag-filter
      - release:
          requires:
            - test-gcc5.4
            - test-gcc6
            - test-gcc7
            #- test-gcc8
            - test-clang4
            - test-clang5
            - test-clang6
            - test-xcode9
            - test-integration
            - test-valgrind
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

jobs:
  lint:
    docker:
      - image: apiaryio/clang:5

    steps:
      - checkout
      - run: ./tools/clang-format-check.sh

  test-gcc5.4:
    <<: *test-base-backports
    docker:
      - image: gcc:5.4

  test-gcc6:
    <<: *test-base-backports
    docker:
      - image: gcc:6

  test-gcc7:
    <<: *test-base-no-backports
    docker:
      - image: gcc:7

  test-gcc8:
    <<: *test-base-no-backports
    docker:
      - image: gcc:8

  test-clang4:
    <<: *test-clang-base-no-backports
    docker:
      - image: apiaryio/clang:4

  test-clang5:
    <<: *test-clang-base-no-backports
    docker:
      - image: apiaryio/clang:5

  test-clang6:
    <<: *test-clang-base-no-backports
    docker:
      - image: apiaryio/clang:6

  test-xcode9:
    <<: *test-xcode
    macos:
      xcode: "9.4.0"

  test-integration:
    docker:
        - image: gcc:7

    steps:
      - run:
          name: Install sudo
          command: 'apt-get update && apt-get install -y sudo'
      - run:
          name: Install CMake
          command: 'apt-get update && sudo apt-get install -y cmake'
      - run:
          name: Install Ruby
          command: 'apt-get update && apt-get install -y ruby ruby-dev'

      - checkout
      - run: git submodule update --init --recursive

      - run:
          name: Build drafter executable (drafter-tui)
          command: |
            mkdir build
            cd build
            cmake ..
            make drafter-tui -j4
            cd ..

      - run:
          name: Drafter TUI integration tests
          command: 'gem install bundler; bundle install && PATH="${PATH}:${PWD}/build/drafter" bundle exec cucumber'

  test-valgrind:
    <<: *test-base-no-backports
    docker:
      - image: gcc:7

    steps:
      - run:
          name: Install sudo
          command: 'apt-get update && apt-get install -y sudo'
      - run:
          name: Install CMake
          command: 'apt-get update && sudo apt-get install -y cmake'
      - run:
          name: Install Valgrind
          command: 'apt-get update && sudo apt-get install -y valgrind'

      - checkout
      - run:
          name: Update submodules
          command: 'git submodule update --init --recursive'

      - run:
          name: Build drafter-test and memcheck unit tests
          command: |
            mkdir build
            cd build
            cmake ..
            ctest -j4 -D ExperimentalBuild
            ctest -j4 -D ExperimentalMemCheck

      - store_artifacts:
          path: artifacts

  release:
    docker:
      - image: circleci/ruby:2.5.1
    working_directory: /tmp/drafter

    steps:
      - checkout
      - run: git submodule update --init --recursive --remote
      - run: ./tools/release.sh
